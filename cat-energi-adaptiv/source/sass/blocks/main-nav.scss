.main-nav {
  font-family: $font-heading;
  font-weight: 500;
  background-color: $white;
  color: $black;

  @media (max-width: $mobile-width-only) { // только для мобильной версии (для ширины равной или меньше 767px) 
    border-bottom: 1px solid $special_grey-5; // добавляет нижнюю границу серым цветом в 1px для навигаации. Такие же граница для элементов списка навигации потом сделаем в вверху в топе
  }

  // при не заданной ширине .page-header__nav занимает всю ширину  <header>, а также <body> , а также <html> , а также вьюпорта и это нас устраивает, но только для мобильной версии. а для плоншетов и шире добавим следующее:
  @media (min-width: $tablet-width) {
    width: 708px; // так как page-header__nav меньше <header>, а также <body> , а также <html> , а также вьюпорта на два отпупа по 30px расчет: (768px - 2*30px)
    margin: 0 auto; // это правило будет центровать по горизонтали page-header__nav относительно  <header>, а также <body> , а также <html> , а также вьюпорта при ширине экрана больше 768px
    padding: 24px 0; // логотип у нас находиться на растоянии 24px от верхнего края ну зададим одинаковые верхний и нижний паддинги для блока.
    display: grid; // строим сетку в page-header__nav для ширины экрана 768px
    grid-template-columns: 174px 1fr; // 174px потомучто первый элемент сетки логотип и его ширина по макету 174px, а меню занимает все простанство справа от него пусть будет 1fr и его ширина будет тянутиься до границ родителя
    gap: 16px; //   добавим промежуток между элементами, пусть всего 16px, а меню сайта (главная, каталог продукции, подбор программы) выравним по правому краю потом.
  }

  @media (min-width: $desktop-width) { // для версии десктопа ничего тогда не поменяется кроме ширины page-header__nav ширина экрана 1440px, но блок будет меньше на ширину отступов справа и слева 110px*2 Итого: 1440-110*2=1220 px 
    width: 1220px;
  }
}

.main-nav__bar { 
  @media (max-width: $mobile-width-only) { // только для мобильной версии (для ширины равной или меньше 767px) 
    width: 320px; // что бы при увеличении ширины элементы лого и кнопка вызова меню все равно оставались на одном растоянии друг от друга
    margin: 0 auto; // центрируем элемент по горизонтали отностиельно родительского блока(page-header__nav который тянется на всю ширину <header>, а также <body> , а также <html> , а также вьюпорта)
    padding: 12px 20px 13px;
    display: grid; // элемент page-header__bar включает в себя элементы .page-header__logo(внутри которого два элемента лого) и .page-header__toggle 
    grid-template-columns: 34px 1fr 34px; // задали симметричную сетку по горизонтали. 34px это ширина левого элемента в блоке лого, кнопка же шириной 24px. Но нам нужна симметричная сетка(тогда центральтный элемент можно выставить по центру например с помошь правила justify-self: center;  поэтому крайние столбцы делаем одинаковыми, равными ширине, равной ширине самого широкого 34px.Однако так как блок лого сосотоит из двух элементов нужно разместить его в первых двух столбцах и построить в нем сетку стобцов 34px и 1fr . Тогда сетко лого совпадет с сеткой .page-header__bar в первых двух столбцах и выравние по точно центру будет возможно.
    gap: 16px; // тут промежуток скорее для приличия -  визуально ничего не изменится.
    align-items: center; // выравнивание элементов по вертикали по центру
  }
}

.main-nav__toggle {
  border: none; // убираем границу на кнопке которая была по умолчанию
  width: 40px; //такая ширина бургер-кнопки сделана для увеличения зоны взаимодествия с кнопкой, хоть и визуально кнопка меньшего размера меньшего размера... 24px
  height: 40px;
  background-color: transparent;
  position: relative;
  &::before { //    рисуем кнопку бургер с помощью псведоэлемента и его теней
    position: absolute;
    top: 12px;
    right: 12px;
    left: 12px;
    content: "";
    width: 24px;
    height: 1.5px;
    background-color: $black;
    box-shadow: 0 8px 0 0 $black,
                0 16px 0 0 $black;   
  }

  @media (max-width: $mobile-width-only) {
    .main-nav--closed & {  // такая конструкция при сборке scss в css добавит медиазапрос   @media (max-width: 767px) { с вложенным селектором .page-header__nav--closed .page-header__toggle { display: block;}}
      display: block;  // то есть если к элементу  .page-header__nav добавят модификатор .page-header__nav--closed то тогда page-header__toggle станет display: block;
    }

    .main-nav--opened & { // такая конструкция при сборке scss в css добавит медиазапрос   @media (max-width: 767px) { с вложенным селектором .page-header__nav--opened .page-header__toggle { display: block; background-image: url("../../img/icons/....") }} /Тем самым заменится картинка кнопки-бкргер на кнопку-крестик
      display: block;
      background-image: url("../../img/icons/")// ??? не взять из макета картинку крестика, подождем уроков по svg наверно ее можно нарисовать самому
    }
  }

  @media (min-width: $tablet-width) { //начиная с ширины для планшетов 768 px и больше (шире) ( версия для десктопов включается также по умолчанию так как она шире 768 px) бургер кнопка для вызова меню не будет отображаться. 
    display: none; 
  }
}

.main-nav__list {
  margin: 0;
  padding: 0;
  list-style-type: none;
  text-align: center;
}

.main-nav__link {
  text-decoration: none;
  background-color: $white;
  color: $black;
  font-size: 20px;
  font-weight: 500;
  line-height: 20px;
  text-transform: uppercase;
  border-bottom: 1px solid $special_grey-5;

  @media (min-width: $tablet-width) {
    font-size: 18px;
    font-weight: 400;
    line-height: 24px;
  }

  @media (min-width: $desktop-width) {
    font-size: 20px;
    font-weight: 400;
    line-height: 20px;
  }
}
