// font-family, font-size, line-height текста насделуются от .page

.process {
  padding-top: 21px; // в данном случае никаикх маржинов между блоками  не задано а использованы паддинги, для ширины и горизонтальных отступов на разных экранах к этому классу миксуется класс .container
  padding-bottom: 49px;

  @media (min-width: $tablet-width) {
    padding-top: 45px;
  }

  @media (min-width: $desktop-width) {
    padding-top: 72px;
  }
}

.process__list {
  margin: 0;
  padding: 0; //  обнуляем отступы тега ol
  color: $special_dark-grey;
  list-style-type: none;

  @media (min-width: $tablet-width) {
    padding-top: 32px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 60px; // растояние между полосками сетки макета для планшета
    row-gap: 36px; // растояние между между номерами в макете по вертикали

    counter-reset: procces; // создаем счетчик в именем process (можно выбрать любое другое имя но для удобства берем имя блока)
  }

  @media (min-width: $desktop-width) {
    grid-template-columns: repeat(4, 1fr);
    // в десктопе появляются четыре колонки
    column-gap: 80px;
    // промежуток по сетке 80px
  }
}

.process__item {
  display: grid;
  grid-template-columns: 60px 1fr;
  gap: 20px;


  @media (min-width: $tablet-width) {
    position: relative;
    // для ширины планшета и шире будет перестроение элементов, будем делать это относительно process__item
    z-index: 0;
    // непонятно зачем, возможно что бы сделать относительные индексы для внутренних элементов
    min-height: 280px;
    // высота псевдоэлемента(зададим его позже) с порядковым номером элемента самый большой вызуальный элемента
    padding-top: 40px;
    // растояние от зеленого квадрата вверх до границы элемента
    padding-right: 72px;
    // не знаю как это вычислить можно использовать подбор в браузере что бы получить необходиму ширину поля для текста

    grid-template-columns: auto; // задаем только один столбец шириной авто, в мобильной версии было два столбца
    grid-template-rows: 80px auto; // рязделяем на строчки первая высотой равна высоте зеленого квадрата (для планшетной и  десктопной версиий 80 px)
    gap: 32px;
    counter-increment: process; // Чтобы значение счётчика начало увеличиваться на определённое значение от элемента к элементу необходимо указать свойство counter-increment и указать имя счетчика который мы будем увеличивать по умолчанию на единицу но если после имени через пробел задать число то счетчик будет увеличиваться на это число. пример-> counter-increment: example 2;
  }

  @media (min-width: $desktop-width) {
    padding-right: 0;
  }

  & + & {
    // способ задать к примеру верхние отступы всем элементам кроме первого, аналог not:(first-child) вроде
    @media (max-width: $mobile-width-only) {// продолжаем для мобильных устройств: при планшете и десктопе это правило не применится так как ограничено максимальной шириной мобильной версии за счет специально созданной переменной на один пиксель меньшей чем ширина планшета
      margin-top: 22px;
    }
  }

  &::before {
    // Создаем зеление квадраты как подложку по иконки. За счет того что мы задаем сетку (с двумя стобцами) родительскому элементу содержащему один подэлемент, и создаем псевдоэлемнт ::before от этого родителя который является по определению дочерним элементом этого родителя, то этот псевдоэлемент занимает место в первом столбце(или строке), а подэлемент родителя занимает место во втором столбце(строке) согласно стандартным настройкам раскладки элементоав в сетках.

    @include size (60px);
    // ширина и высота 60рх  смотри файл mixins.scss, 60 px размер зеленого кварата в версии для мобильников
    margin-top: -2px;
    // поднимет элемент на два пикселя (в макете с небольшим смещением вверх на 2 px)
    content: "";
    background-color: $color-primary;
    // задаем фон зеленому квадрату пседоэлемента
    background-repeat: no-repeat;
    // фоновое изображение которое будет присвоено позже будет без повторений
    background-position: 50% 50%;

    @media (min-width: $tablet-width) {
      margin-top: 0; // верхний корректрующий отступ (-2рх) как в мобильном виде не нужен - обнуляем

      @include size (80px); // для планшетов и шире квадрат становиться размеровм 80px
    }
  }

  &::after {
    @media (min-width: $tablet-width) {
      z-index: -1;
      // назначение этого элемента это фон. поместим его за всеми элементами
      position: absolute;
      // для шрин начиная от планшета и шире process__item имеет position: relative и афтер спозиционируется  отностиельно него
      top: 0;
      // границы по вертикали совпадабт с process__item
      right: 80px;
      // не понятно откуда это значение все номера расположены но в среднем согласен 80рх где-то для двойки (109-30) и для четверки (105-30)
      content: counter(process);
      // выводим текущее значение счетчика  в контент псевдоэлемента который будет отвечать за бекграундный порядковый номер
      // Порядковые бекграундные номера только в вериях планшета и десктопа
      color: $basic_grey;
      font-family: $font-heading;
      font-size: 280px;
      font-weight: 400;
      line-height: 1;/* 100% */
    }

    @media (min-width: $desktop-width) {
      right: 0;
    }
  }

  // смещаем первый порядковый номер влево на 16px
  &:first-of-type::after {
    @media (min-width: $tablet-width) {
      margin-right: 16px;
    }
  }
}

// подклбчаем изображения для каждого элемента свое, используем модификаторы
.process__item--leaf::before {
  background-image: url("../img/icons/icon_leaf.svg");
}

.process__item--powder::before {
  background-image: url("../img/icons/icon_tub.svg");
}

.process__item--food::before {
  background-image: url("../img/icons/icon_eat.svg");
}

.process__item--scales::before {
  background-image: url("../img/icons/icon_alarm.svg");
}

.proccess__br {
  display: none;

  @media (min-width: $tablet-width) {
    display: block;
  }
}
