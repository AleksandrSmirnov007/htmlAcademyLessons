.example {
  padding: 25px 0 40px;
  background-color: $special_grey-6;

  @media (min-width: $tablet-width) {
    padding-top: 43px;
    padding-bottom: 56px;
    border-top: 1px solid $special_grey-5; // появляется полоска между process  и  example реалзуем это через верхнюю границу
    background-image: linear-gradient(to top, $special_grey-6 462px, $white 462px); // двух-цветный фон, идем снизу на верх серый до 462рх потом белый
  }

  @media (min-width: $desktop-width) {
    padding-bottom: 75px; // верхний паддинг остается так же 43px
  }
}

.example__container { // на эране десктопа блок разделяется на две колонки
  @media (min-width: $desktop-width) {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 80px;
  }
}

.example__content { //включает в себя текстовую информацию блока
  margin-bottom: 40px;
  @media (min-width: $tablet-width) {
    display: grid;
    grid-template-columns: 366px 1fr;
    column-gap: 32px; //не понятно как вычисленное значение
  }
  @media (min-width: $desktop-width ) {
    grid-template-columns: 366px 70px 1fr; // 366 рх понятно два dt и dl идут рядом через gap 24px, но 70 рх?
    margin-bottom: 0; // так как блок делится на две колонкм в левой .example__content и он нижней границей примыкает к границе блока родителя то отступ вниз 40рх не нужен
  }
}

.example__heading {
  @media (min-width: $tablet-width) {
    grid-column: 1 / -1; // осторожно злая арифметика но, как понял это только в less мы получим -1,  в scss распознает что это работа c grid
  }
}

.example__text {
  color: $special_dark-grey;
  margin: 0;
  margin-bottom: 20px;
  @media (min-width: $tablet-width) {
    grid-column: 1 / -1;
    margin-top: 63px; // нижний отступ у верхнего элемента на .example___text задан через класс page-main__heading, но на версий для планшета и десктопа я его обнулил
    margin-bottom: 54px;
  }
  @media (min-width: $desktop-width) {
    grid-column: 1 / 3; // родителем этого элемента является .example__content в нем три стобцца, на ширине эрана элемент занимет первые два.
    margin-top: 146px;
    margin-bottom: 70px;

  }
}

.example__list {
  margin-bottom: 34px; //  будем использовать отступ от списка а example-definition спозиционироем c помощью отрицательных маржинов и пусть выпадабт вниз из списка на 14рх и тогда визуально отсуп до следующего элемнта будет 20px
  margin-top: 0;
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 32px;
  @media (min-width: $tablet-width) {
    margin-bottom: 0; // не оспользуем отступ у списка, используется отступ у .example-content
  }
  @media (min-width: $desktop-width) {
    margin-bottom: 60px;
    grid-column: 1 / 2; // display grid также задан и родителю (example-content) , а он разбит на две колонки. Помещаем example-list в первую из  них
    gap: 42px; // изменяем промежуток между элементами во внутренней сетке
  }
}

.example__item {
  padding: 14px 8px 0;
  display: flex;
  flex-direction: column-reverse; // меняем элементы местами
  align-items: center; //выравниваем по вертикальной оси
  border: 1px solid $special_grey;
  border-radius: 3px;

  @media (min-width: $tablet-width) {
    padding-top: 15px; // паддинг меняется на 1рх в юольшую сторону
  }
}

 .example__title {
  width: 87px; // ширина текстового обьекта 77 величина стертой рамки в сумме с обоих сторон 10рх итого 87px
  margin-bottom: -10px; // элемент спускается вниз но что бы не расширять example__item используем отрицательный маржин
  padding: 0 4px; // неюольшие горизонталные отсупы
  text-align: center;
  background-color: $special_grey-6;
  color: $special-dark-grey;
  font-family: $font-body;
  font-size: 12px;
  font-weight: 400;
  line-height: 1;
  text-transform: lowercase;

  @media (min-width: $tablet-width) {
    width: auto; // связано с тем что теперь текс не в две строчки ширина надписи зависит от содержимого
    margin-bottom: -6px; // надпись выпадает из example__item на 5рх округляем до четного 6рх
    padding: 0 7px; // горизонтальные паддинги в этом элементе у нас отвечают за растояние до рамки от example__item по горизонтали
    background-color: $white; // элемент вместе с блоком меняет фон на белый
    font-size: 14px; // шриф становиться больше
  }

  @media (min-width: $desktop-width) {
    background-color: $basic_grey; // фон меняется опять на серый но на другой серый
  }
}


.example__definition {
  margin-left: 0;  // у тегов dd есть отступ слева, обнуляем его
  margin-bottom: 8px; //по сути это растояние вниз до exaple__title так как спомощь флекса выше мы поменяли направление оси и тем самым поменяли порядок элементов в родителе
  font-family: $font-heading;
  font-size: 24px;
  font-weight: 400;
  line-height: 24px;
  text-transform: uppercase;
  @media (min-width: $tablet-width) {
    font-size: 30px;
    line-height: 37px;
    margin-bottom: 11px; // растояние до нижнего элемента выросло
  }
}

.example__spending {
  margin: 0;  //обнуляем отступы у тега <p>
  text-align: center;
  font-family: $font-heading;
  font-size: 14px;
  font-weight: 400;
  line-height: 20px;
  text-transform: uppercase;

  @media (min-width: $tablet-width) {
    padding-left: 178px;
    text-align: right;
    margin-top: 11px;
  }
  @media (min-width: $desktop-width) {
    padding-left: 0;
    grid-column: 1 / 2;
    display: grid;
    grid-template-columns: 1fr 42px 1fr; // разбиваем на сетку равные стобцы по краям а средний будем использовать как промежуток элементам в htmlмы добавили роблочк span теперь можно управлят ьими как элементами grid
    text-align: left;

    span:first-child {
      grid-column: 1 / 2;
    }

    span:last-child {
      grid-column: 3 / 4;
      justify-self: center;
    }
  }
}

// изображение
.example__images {
  margin: 0 auto;
  margin-bottom: 15px;

  @media (min-width: $tablet-width) {
    display: grid;
    grid-template-columns: 1fr min-content;
    padding: 0 58px;
  }
  @media (min-width: $desktop-width) {
    padding: 0;
    width: 592px;
  }
}

.example__image-wrapper {
  overflow: hidden;
  display: grid;
  //скрывает содержимое, выходящее за пределы контейнера.
  &:last-child {
    // равняем картинку внутри по правому краю так ширина обертки будет меняться
    // задаем отступ для картинки так как она меньше чем 280px при высоте 232рх
    width: 280px;
    @media (min-width: $tablet-width) {
      justify-content: end;
      display: flex;
      width: 296px;
    }
  }
}

.example__image {
  height: 232px;
  @media (max-width: $mobile-width-only) {
    display: none;
  }
  @media (min-width: $tablet-width) {
    height: 511px;
  }
}

.example__image--before {
  width: 280px;
  justify-self: center;
  @media (min-width: $tablet-width) {
    margin-left: 50px;
    min-width: 536px;
    max-width: 536px;
  }
}

.example__image--after {
  width: 243px;
  justify-self: center;
  @media (min-width: $tablet-width) {
    margin-right: 0;
    min-width: 536px;
    max-width: 536px;
  }
}

.example__image--active {
  @media (max-width: $mobile-width-only) {
    display: block;
  }
}
