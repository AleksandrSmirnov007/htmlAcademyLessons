//функция возвращающая случайное целое число из переаданного диапазона включительно

// Примечание: Может показаться заманчивым использовать Math.round() для округления, но это может сделать распределение неравномерным и оказаться не тем, что вам нужно.

// Функция JavaScript Math.ceil() округляет заданное число до ближайшего большего целого. Она всегда округляет до положительной бесконечности, то есть увеличивает число до следующего целого числа, если оно еще не является целым числом. Эта функция полезна для округления значений в вычислениях.

// JavaScript-функция math.floor() предназначена для округления чисел, которые больше или равны x, путем нахождения ближайшего целого числа, которое меньше или равно ему. Синтаксис math.floor в javascript таков: чтобы округлить в меньшую сторону, введите здесь x как число, которое необходимо округлить в меньшую сторону. Например, если x =. x = 5.8 = 5.8, то использование Math.floor(5.8) приведет к результату 5, поскольку он округляется до ближайшего целого числа, меньшего или равного 5.8.

// Math.min() Статический метод возвращает наименьшее из чисел, заданных в качестве входных параметров, или Infinity если параметров нет.

// Math.abs() Статический метод возвращает абсолютное значение числа.

// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Math/random

  // Чтобы не заставлять пользователя нашей функции помнить порядок аргументов,
  // реализуем поддержку передачи минимального и максимального значения в любом порядке,
  // а какое из них большее и меньшее вычислим с помощью Math.min и Math.max.

  // После нам нужно убедиться, что пользователь не передал дробные значения,
  // для этого на всякий пожарный случай нижнюю границу диапазона
  // мы округляем к ближайшему большему целому с помощью Math.ceil,
  // а верхнюю границу - к ближайшему меньшему целому с помощью Math.floor

  // Обратите внимание, чтобы учесть условие, что диапазон может быть [0, ∞),
  // мы не ругаем пользователя за переданное отрицательное число,
  // а просто берём его по модулю с помощью Math.abs

  // Дальше используем Math.random() для получения случайного дробного числа в диапазоне [0, 1),
  // которое домножаем на разницу между переданными числами плюс единица - это будет наша случайная дельта.
  // После нужно сложить дельту с минимальным значением, чтобы получить итоговое случайное число.

  // "Плюс единица", чтобы включить верхнюю границу диапазона в случайные числа

  // И в конце с помощью метода Math.floor мы округляем полученный результат,
  // потому что Math.random() генерирует только дробные числа и ноль.

function getRandomPositiveInteger(a, b) {

  const lower = Math.ceil(Math.min(Math.abs(a), Math.abs(b)));
  const upper = Math.floor(Math.max(Math.abs(a), Math.abs(b)));
  const result = Math.random() * (upper - lower + 1) + lower;
  return Math.floor(result);
}

function checkStringLength(string, length) {
  return string.length <= length;
}


getRandomPositiveInteger(0, 1);
checkStringLength('proba', 50);

// если сервер(brausersinc) завис перезагрузить его cntl + c
// при изменении кода в файле .js на странице в браузере(при работе brousersinc) появляется paused in debugger нажать на стрелку для перезагрузки.

// создадим массивы для значений
// создадим функцию для генерации массива

//  создалим массив с описаниями картинки
const DESCRIPTIONS = [
  'Дети играют в мяч',
  'Девушка с персиками',
  'Три поросенка',
  'Мужчина на велосипеде',
  'Домик в деревне',
  'Грунтовая дорога',
  'Воздушный шар',
  'Мост через реку',
  'Морское побережье',
  'Девочка с собакой',
  'Лесное озеро',
  'Высокие горы',
  'Бабочка на цветке',
  'Кот на дереве',
  'Эйфелева башня',
  'Самолет в небе',
  'Мотоциклист на треке',
  'Занятия в школе',
  'Семейный праздник',
  'Осенняя пора',
  'Небоскребы в мегаполисе',
  'Чемпионат Формулы-1',
  'Кот в траве',
  'Дерево в поле',
  'Пирс у моря',
];

const COMMENTS  = [
  'Всё отлично!',
  'В целом всё неплохо. Но не всё.',
  'Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.',
  'Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.',
  'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
  'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!'
]

const NAMES = [
  'Иван',
  'Хуан Себастьян',
  'Мария',
  'Кристоф',
  'Виктор',
  'Юлия',
  'Люпита',
  'Вашингтон',
];
const SURNAMES = [
  'да Марья',
  'Верон',
  'Мирабелла',
  'Вальц',
  'Онопко',
  'Топольницкая',
  'Нионго',
  'Ирвинг',
];

function getRamdomElement (element) {
   return element[getRandomPositiveInteger(0, element.length -1)];
}

function getMessages () {
  let countMessages = getRandomPositiveInteger(1, 2); // количество сообщений в будущем массиве случайное число от 1 до 2
  let messages = []; // создаем сам массив

  // задаем цикл, он прокрутится столько раз сколько выпало количество сообщений (1 или 2 раза)
  for (let i = 0; i < countMessages; i++) {
    let message = getRamdomElement(COMMENTS); // рулетка сообщений из словаря
    let author = getRamdomElement(NAMES) + ' ' + getRamdomElement(SURNAMES); // рулетка по ИМЕНАМ + ПРОБЕЛ + рулетка по фамилиям
    messages[i] = [message, author];
  }
  return messages;
}

let currentId = 0;

// создаем данные для одной картинки если вызвать эту фунцию например в консоли то счетчик currentId станет на 1 больше
function createPicture () {
  currentId = currentId + 1;
  return {
    id: currentId,
    url: 'photos/' + currentId + '.jpg',
    description: DESCRIPTIONS[currentId - 1],
    likes: getRandomPositiveInteger(15, 200),
    comments: getMessages(),
  }
};

// создаем массив из 25 обьектов с помощью метода для массивов From. кадый обект создается фунцией указанной в аргументе метода.
const similarPictures = Array.from({length: 25}, createPicture);
console.log(similarPictures);
