console.log('preview.js is working')

// Согласно условию задачи пользователь может загружать только изображения, поэтому мы можем ограничить расширения файлов, доступные для выбора. Для этого заведём константу с допустимыми расширениями.

const FILE_TYPES = ['jpg','jpeg','png'];
// Найдём наши элементы на странице:

// fileChooser — поле ввода, с помощью которого пользователь выбирает изображение;
// preview — картинка, куда мы будем выставлять превью загруженного изображения.

const fileChooser = document.querySelector('.img-upload__input');

const preview = document.querySelector('.img-upload__preview img');

const effectPreview = document.querySelectorAll('.effects__preview');
console.log(effectPreview);


// шаги демонстрации:
// Обработаем событие change, оно случится, когда пользователь выберет изображение. Обработка событий вам знакома, а тем, кто выбрал Кекстаграм — знакома даже работа с <input type="file">. Поэтому перейдём к самому интересному.
// Во-первых, разберёмся, как получить доступ к выбранному файлу.У DOM-узла поля для выбора файла есть свойство files — это структура, похожая на массив. В этом свойстве хранится список файлов. Да-да, хотя мы можем выбрать лишь один файл, в свойстве files хранится список, пусть и из одного файла. А раз структура похожа на массив, мы можем этот единственный в списке файл получить по индексу, он у него будет всегда 0.
// Во-вторых, если пользователь что-то выбрал, нам нужно проверить, что именно он выбрал: начиная от того, изображение ли это, заканчивая типом изображения. Сделать это можно несколькими способами. Один из них — это использовать атрибут accept в разметке, а второй — проверить файл с помощью JavaScript. Кстати, мы рекомендуем использовать оба подхода вместе. Дело в том, что атрибут accept в диалоговом окне выбора файла сразу ограничивает типы файлов, доступные для выбора, что исключает ошибку, а значит мы не даём пользователю ошибиться. А вариант на JavaScript в таком случае дополнительно подстрахует, если пользователь найдёт способ выбрать неугодный файл. в html ---->   <input type="file" name="avatar" accept="image/png, image/jpeg">
// Теперь нам нужно проверить, оканчивается ли имя файла одним из допустимых расширений. Для этого мы с помощью метода some пройдём по массиву FILE_TYPES и для каждого элемента — допустимого расширения — проверим, оканчивается ли название файла на него. В этом нам поможет метод строки endsWith.
// Метод endsWith() в JavaScript проверяет, заканчивается ли строка указанной строкой или символом. Если заканчивается, то возвращает true, а если нет — false.
// Метод some возвращает булево значение, было ли совпадение, поэтому мы можем результат выполнения этого метода использовать в условии. matches - переводится как совпадение
// После того, как файл выбран, а все проверки пройдены, загруженное изображение нужно показать на странице. Для этого воспользуемся методом URL.createObjectURL(), который позволяет сделать ссылку на содержимое, а не ресурс на каком-то адресе. Изображение, которое вернёт метод, мы положим в атрибут src DOM-узла с превью картинки.      preview.src = URL.createObjectURL(file); Готово!

// От себя: - теперь уберем обработчик событий fileChooser.addEventListener('change', () => {....}  и назовем безымянную функцию "showPreview" оставив только функцию для него которую мы экспортируем отсюда и импортируем модуль form.js а там уже есть обработчик событий  можно было и там этот код написать но чтобы не перегружать и без того большой модуль сделаем экспорт и импорт
// добавим отображение в превьшках фильров нашей новой загруженной картинки переберем все элемениты коллекции effectPreview (найденной с помощью querySelectorAll) и каждому добавим новый url сгенерированный  методом URL.createObjectURL(file)


const isValidTypeflle = (file) => {
  const fileName = file.name.toLowerCase();
  const matches = FILE_TYPES.some((it) => {
    return fileName.endsWith(it);
  })

  return matches;
};

const showPreview = () => {
  const file = fileChooser.files[0];

  if (isValidTypeflle(file)) {
    const previewSrc = URL.createObjectURL(file);
    preview.src = previewSrc;

    effectPreview.forEach((element) => {
      element.style.backgroundImage = `url(${previewSrc})`;
    });
  }
};


export {showPreview};
