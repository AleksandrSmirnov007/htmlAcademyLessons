Попытка создания сайта на ворд пресс что бы разобраться окончательно как верстать под CMS

для обучения использую видео с рутуба с инструкцией

Как создать сайт. Создаём сайт на Ворд Пресс своими руками. Полная инструкция
https://rutube.ru/video/16c580732f2bdf318a7b7e3edf130bac/


Испльзую  указанный в видео хостинг https://sprinthost.ru


В принципе что то получилось Я зарегистрировал домен
наверно арендовал хостинг
установил ворд пресс
зашел в админку

посмотреть вот это подробное видео
https://rutube.ru/video/a1c13af10e960ef96f5f17377a3b2be2/
(это видео я не смотрел стал разбираться сам так как есть)


И так сегодня 09.05.2025 1ч:24м. Теперь будку вести хронологию.
В пердыдущие дни мне удалость отредактировать сайт на вордпресс.
Я производил изменения через админку, сделал несколько страниц добавил фотки и тексты.
И даже блог коментариев (который сам работает и я отправил коментарий с телефона и одобрил свой же комментарий  через админку)

В целом примерно я науссился управлять сайтом как контент менеджер, но верстка пока закрыта для меня
Я смотрю на код через инструменты разаработчика но  не понимаю принципа
для стилей используют id  и классы которые непонятно откуда беруться

поэтому я решил пройтись по материалам курса еще раз.
Теперь я имею практику работы с CMS и попробую применить знания на реальном проекте

далее программа целиком:

//// программа курса - начало

        1. Обзор популярных систем управления контентом
        CMS с точки зрения пользователя
        1.1. Что такое CMS?
        1.2. Контент-менеджер: обзор
        1.3. CMS: общий обзор
        1.4. WordPress: обзор
        1.5. Bitrix: обзор
        Принципы организации шаблонов
        1.6. Из чего состоит CMS
        1.7. Пошаговая демонстрация: разделение кода страниц сайта на шаблоны в Wordpress
        Посмотрим, как будет разделяться HTML код на шаблоны в Wordpress.
        1.8. Bitrix
        1.9. Чек-лист самопроверки при подготовке к разделению на шаблоны
        Изучите этот чек-лист - вы можете использовать его в своей рабочей практике после курса.
        1.10. Принципы организации CSS и HTML
        1.11. Пошаговая демонстрация: организация CSS и HTML
        Посмотрим примеры особенностей кода в Wordpress и Bitrix.
        1.12. Демо-проект: подготовка блока к вынесению контента в WYSIWYG редактор
        Пример решения типовой задачи
        1.13. Чек-лист самопроверки при подготовке CSS и HTML
        Изучите этот чек-лист - вы можете использовать его в своей рабочей практике после курса.
        1.14. Принципы организации JavaScript кода
        1.15. Чек-лист самопроверки при подготовке JavaScript
        1.16. Тест по разделу

        2. Работа с генерируемым контентом. Текст
        Работа с генерируемым контентом
        2.1. Текстовый контент, который генерирует пользователь
        2.2. Демо-проект: подготовка верстки к вынесению контента в WYSIWYG редактор
        Пример решения типовой задачи
        Практика
        2.3. Задание: подготовка текстовых параметров для интеграции
        Задание для самостоятельной практики.
        2.4. Решение: подготовка текстовых параметров для интеграции
        Эталонное решение задания.

        3. Работа с генерируемым контентом. Графика
        Научимся работать с иконками, фоновыми и контентными изображениями

        3.1. Графика
        3.2. Иконки
        3.3. Фоновые изображения
        3.4. Контентные изображения
        3.5. Демо-проект: подготовка графики к интеграции CMS
        Пример решения типовой задачи
        Практика
        3.6. Задание: подготовка графики для интеграции
        Задание для самостоятельной практики.
        3.7. Решение: подготовка графики для интеграции
        Эталонное решение задания.
        3.8. Чек-лист самопроверки
        Изучите этот чек-лист - вы можете использовать его в своей рабочей практике после курса.

        4. Работа с генерируемым контентом. Формы
        Разберём нюансы интергации форм с помощью плагина и с нуля. Подготовим разметку к интеграции систем управления
        4.1. Формы
        4.2. Через плагин
        4.3. Без плагина
        4.4. Демо-проект: подготовка формы к интеграции WordPress
        Пример решения типовой задачи
        4.5. Демо-проект: подготовка формы к интеграции Bitrix
        Пример решения типовой задачи
        Практика
        4.6. Задание: подготовка формы для интеграции через плагин Contact Form 7
        Задание для самостоятельной практики.
        4.7. Решение: подготовка формы для интеграции через плагин Contact Form 7
        Эталонное решение задания.
        4.8. Чек-лист самопроверки
        Изучите этот чек-лист - вы можете использовать его в своей рабочей практике после к


        5. Работа с генерируемым контентом. Меню
        Научимся стилизовать меню используя генерируемые классы и кастомные свойства
        5.1. Меню
        5.2. Демо-проект: подготовка меню к интеграции WordPress
        Пример решения типовой задачи
        5.3. Демо-проект: подготовка меню к интеграции Bitrix
        Пример решения типовой задачи
        Практика
        5.4. Задание: подготовка меню к интеграции WordPress
        Задание для самостоятельной практики.
        5.5. Решение: подготовка меню к интеграции WordPress
        Эталонное решение задания.
        5.6. Чек-лист самопроверки
        Изучите этот чек-лист - вы можете использовать его в своей рабочей практике после курса.

        6. Расширяемость вёрстки
        Поговорим об изменении контента на странице и научимся работать с простым и сложным переполнением
        6.1. Расширяемость вёрстки
        6.2. Изменение текстового контента на странице
        6.3. Изменение количества блоков
        6.4. Что делать, если при переполнении контента ломается дизайн?
        6.5. Как правильно тестировать вёрстку на изменение контента

        7. Итоговый раздел
        Краткое подведение итогов и финальный тест.
        7.1. Подводим итоги курса
        Проверка знаний
        7.2. Итоговый тест по курсу

//// программа курса - конец



Я начал повтор иззучения программы с первого пункта программы,
что бы разобраться с версткой CMS на практике

1. Обзор популярных систем управления контентом

1.1. Что такое CMS?    //прочитал
1.2. Контент-менеджер: обзор    //прочитал
1.3. CMS: общий обзор     //прочитал
пока только подготовка теоретическая никаких практических действий не было

1.4. WordPress: обзор    // читать
11.05.2025
Конспект:
Приведём пример. Чтобы просто получить редактор кода типа WYSIWYG (What You See Is What You Get, «что видишь, то и получишь»), нужно установить и активировать плагин, включающий классический редактор, до этого вы будете видеть новую версию блочного характера.

Типы материалов и структура
По умолчанию у WordPress включены следующие типы материалов: страница, запись и комментарий. Это связано с тем, что CMS была придумана для блогов. Комментарии можно отключить, страницы и записи — нет.

Страница — это фиксированный материал, своего рода лендинг. Страницы не организуются в ленты, не тегируются, им нельзя задать категорию, но зато можно установить их иерархию. Странице можно задать «постоянную ссылку» — удобный адрес. Страницы могут быть независимыми.

Запись — это запись в блоге. Для сортировки каждой записи можно добавлять метки и рубрики. Обычно рубрики применяют для типов контента: советов, заметок, анонсов, новостей, статей. Метки используют для тематик. Например, на сайте про еду могут быть такие метки: супы, горячее, закуски, десерты.

При этом у сайта обязательно будет единая страница, на которую будут выводиться все записи, вне зависимости от их рубрики и метки. По умолчанию это страница «Блог». Она нужна не во всех случаях, поэтому можно сделать такую страницу скрытой и не выводить в меню.

Менять тип материала со страницы на запись и наоборот в WordPress нельзя.

1.4. WordPress: обзор ///прочтен
1.5. Bitrix: обзор // читать
11.05.2025
1.5. Bitrix: обзор //  прочитано
1.6. Из чего состоит CMS

Начнём с общей информации о системах управления и разберём, как они устроены внутри с точки зрения кода. CMS состоят из двух частей:

Служебные файлы, то есть ядро системы.
Файлы, которые отвечают за внешний вид сайта. В разных системах управления они называются по-разному. В WordPress все эти файлы называются темой, а отдельный файл — шаблоном. В Bitrix все файлы называются шаблоном, а отдельный файл — файлом шаблона. Поэтому если в части про WordPress упоминается шаблон, то для Bitrix это означает файл шаблона.
То есть шаблон WordPress и файл шаблона Bitrix — это просто файлы с расширением PHP, которые содержат в себе HTML-код и PHP-функции. Подготовка вёрстки под CMS — это подготовка HTML файлов перед разделением на PHP файлы. Получается, что к ядру системы ваша работа не относится. Разработчики также используют выражения «натянуть WordPress» или «натянуть Bitrix». Они означают перенос разметки в тему.
Обе системы написаны на языке PHP
<?php и ?> указывают начало и конец кода PHP.

Пример встроенного PHP кода в разметку файла index.html:

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Это страница</title>
</head>
<body>

  <h1>Заголовок</h1>
  <?php
    echo "это встроенный в разметку PHP код";
  ?>
  <p>Текст</p>

</body>
</html>

        Копировать



index.html

Пример PHP кода в файле index.php:


<?php
    echo "это PHP код в файле index.php";
?>


        Копировать



index.php

То есть разработчик, который будет натягивать систему управления на верстку, будет в ваш код встраивать код PHP. Для чего вам это знать? Чтобы после того как вашу верстку интегрируют CMS и вам прилетят какие-то правки по верстке, вы не удивлялись, что HTML-файлы исчезли и вместо них появилось много PHP-файлов.

Темы искать в папка wp-content - папка themes

Поменяем тему на Device:

Как видите, весь контент остался прежним: логотип, изображения товаров, цены, пункты меню, варианты сортировки, корзина. Поменялись стили, сетка в шапке и шрифты. То есть смена темы меняет не сами изображения и тексты, а их расположение на странице и стили.

Далее посмотрим, как разработчик будет делить HTML-разметку на PHP файлы (то есть шаблоны). Это важно знать, чтобы разработчику не пришлось вникать в ваш код и дописывать его самостоятельно.

1.6. Из чего состоит CMS // прочитано

13.05.2025
Сегодня я попробовал добавить свою страницу в дирректорию на сайте.
имя страницы: page-test.html
содержание страницы:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <h1>Добро пожаловать на тестовую страницу</h1>
</body>
</html>

сначала я добавил страницу в корневую папку рядом с public_html,
сделал на сайте ссылку на тестовую страницу (montage47.ru/page-test.html) но получил при переходе:
Not Found
The requested URL /page-tes was not found on this server.

Потом я преместил файл page-test.html в саму папку public_html
И тогда смог перейти по ссылке на сайте

Теперь создам папку для своих экспериментов и помещу туда page-test.html
В дальнейшем планирую добавить стилевой файл и скрипт

назову папку smirnov-test

переместил, переписал сссылку на сайте на https://montage47.ru/smirnov-test/page-test.html
Все работает!
добавлю стилевой файл в этуже папку:
Работает но немного странно при измененнии файла css он как буддто бы гдето храниться в браузере и загружается бех изменений
если удалить кэш браузера потом всетаки загружается обновленный css

добавил файл со скриптом - все работает.

перехожжу к изучению демонтрации на практике
1.7. Пошаговая демонстрация: разделение кода страниц сайта на шаблоны в Wordpress

щаг1 В WordPress подключается один CSS файл на все страницы. Поэтому важно создать только один стилевой файл.
// так я пока не нашел этот файл, все файлы в папке styles имеют формат json


15.05.2025
Шпаргалка по MySQL
https://habr.com/ru/articles/564390/

закончил на Операторы...
дошел до Создание таблицы
Пока хватит потом еще почитать


Перешел к демонстрации
Поитогам  понял сто код разьивают на фрагменты и  php  может как то склеивать эти фрагменты в единую страницу

Скачал всякое что бы php работало как пайтон - не запускается php файл пишет
1.7. Пошаговая демонстрация: разделение кода страниц сайта на шаблоны в Wordpress
пройдено но не могу запустить php-файл

16.05.2025

Нашел css файл с который подкючается к странице сайта
/home/a1124660/domains/montage47.ru/public_html/wp-content/themes/twentytwentyfive/style.css

содержание файла style.css

/*
Theme Name: Twenty Twenty-Five
Theme URI: https://wordpress.org/themes/twentytwentyfive/
Author: the WordPress team
Author URI: https://wordpress.org
Description: Twenty Twenty-Five emphasizes simplicity and adaptability. It offers flexible design options, supported by a variety of patterns for different page types, such as services and landing pages, making it ideal for building personal blogs, professional portfolios, online magazines, or business websites. Its templates cater to various blog styles, from text-focused to image-heavy layouts. Additionally, it supports international typography and diverse color palettes, ensuring accessibility and customization for users worldwide.
Requires at least: 6.7
Tested up to: 6.7
Requires PHP: 7.2
Version: 1.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Text Domain: twentytwentyfive
Tags: one-column, custom-colors, custom-menu, custom-logo, editor-style, featured-images, full-site-editing, block-patterns, rtl-language-support, sticky-post, threaded-comments, translation-ready, wide-blocks, block-styles, style-variations, accessibility-ready, blog, portfolio, news
*/

/*
 * Link styles
 * https://github.com/WordPress/gutenberg/issues/42319
 */
a {
	text-decoration-thickness: 1px !important;
	text-underline-offset: .1em;
}

/* Focus styles */
:where(.wp-site-blocks *:focus) {
	outline-width: 2px;
	outline-style: solid;
}

/* Increase the bottom margin on submenus, so that the outline is visible. */
.wp-block-navigation .wp-block-navigation-submenu .wp-block-navigation-item:not(:last-child) {
	margin-bottom: 3px;
}

/* Increase the outline offset on the parent menu items, so that the outline does not touch the text. */
.wp-block-navigation .wp-block-navigation-item .wp-block-navigation-item__content {
	outline-offset: 4px;
}

/* Remove outline offset from the submenus, otherwise the outline is visible outside the submenu container. */
.wp-block-navigation .wp-block-navigation-item ul.wp-block-navigation__submenu-container .wp-block-navigation-item__content {
	outline-offset: 0;
}

/*
 * Progressive enhancement to reduce widows and orphans
 * https://github.com/WordPress/gutenberg/issues/55190
 */
h1, h2, h3, h4, h5, h6, blockquote, caption, figcaption, p {
	text-wrap: pretty;
}

/*
 * Change the position of the more block on the front, by making it a block level element.
 * https://github.com/WordPress/gutenberg/issues/65934
*/
.more-link {
	display: block;
}

добавил строки в самый низ кода:

/*Мой код для стилизации  */
body {
    /* фон зеленый оттенок белоз-зеленый */
    background-color: #BDECB6;
}

это сработало - фон всеx страниц поменялся на бледно зеленый.


18.05.2025
1.10. Принципы организации CSS и HTML
Блоки с фоновым изображением
Если предполагается изменение фонового изображения из админки, пропишите изображение через атрибут style у нужного блока в HTML, а не в CSS. Вынести в админку написанный CSS нельзя, поэтому фоновую картинку нужно вынести в HTML. Например, изменение фоновой картинки в первом блоке главной страницы «Седоны»:

Для этого пропишем фоновую картинку в HTML:

<section class="welcome-area" style="background-image: url(“img/welcome-bg.jpg”);">
  <img src="img/welcome.svg" width="456" height="350"> <!-- картинка с текстом Welcome to the gorgeous Sedona -->
</section>

        Копировать



Всю остальную стилизацию оставляем в CSS:

.welcome-area {
  background-size: cover;
  background-repeat: no-repeat;
}
