// Для демонстрации мы добавили кнопку «Вернуть метку на место». Перемещайте метку по карте, а потом нажмите на кнопку, и метка вернётся в начальное положение.
const resetButton = document.querySelector('#reset');
// Создадим карту. Для этого воспользуемся методами глобального объекта L, сокращение от Leaflet, который появился у нас после подключения скрипта библиотеки. Далее всё выполняем последовательно. Вызываем у L метод map(), чтобы создать карту. Методу передаём id элемента, в который нужно отрисовать карту. Затем по цепочке вызываем метод setView(), чтобы задать параметры отображения карты — центр и масштаб. Откуда мы это всё узнали? Из документации Leaflet, раздел «Быстрый старт». Всегда, когда начинаете работать с новой библиотекой, читайте её документацию!
// Одной из самых частых задач при работе с картой является подписка на события карты для дальнейших действий. Принцип работы один в один как со слушателями событий, только синтаксис отличается. Для примера добавим карте слушатель события load или по-русски «инициализация», и когда карта будет готова, выведем сообщение об этом в консоль. Похожим образом можно подписаться почти на все события с картой: перемещение, изменение масштаба или размеров, добавление и удаление метки и так далее.
const map = L.map('map')
  .on('load', () => {
    console.log('Карта инициализирована');
  })
  .setView({
    lat: 59.96831,
    lng: 30.31748,
  }, 10);

//Координаты города Тихвин: 59.6451 северной широты и 33.5294 восточной долготы.
// Кажется, что карта появилась… но не загрузилась, что за серый квадрат?
// Дело в том, что Leaflet предоставляет только JavaScript API, а изображения карт нужно брать у других «поставщиков». Вот она разница между open source и коммерческим продуктом — гибкость и свобода, но лишние телодвижения. Воспользуемся open source изображениями карт от OpenStreetMap, добавив их как слой на нашу созданную карту. Для этого снова по цепочке: создаём нужный слой командой L.tileLayer(), а затем добавляем его на карту методом addTo(). Откуда мы это узнали? Всё из того же раздела «Быстрый старт». Кстати, блоки из фигурных скобок в адресе — это так задумано, чтобы подключать все нужные слои.

L.tileLayer(
  'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
  {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
  },
).addTo(map);

// Если нужно, можно отказаться от штатной иконки и заменить её на свою. Всё по уже знакомой схеме. Сначала создаём L.icon() то, что нужно добавить на карту. Обратите внимание, мы указали относительный путь к иконке — ./img/main-pin.svg. Потом добавляем icon: mainPinIcon в параметры маркера. Самое сложное здесь, это управиться с размерами новой иконки. Если с iconSize понятно, это размеры картинки, то с iconAnchor будет посложнее — это координаты кончика хвоста метки. Они высчитываются от левого верхнего угла иконки. У нас метка с хвостом вниз, симметричная по горизонтали, поэтому мы укажем 26 и 52, это же ширина метки/2 и высота метки, это же x и y кончика хвоста соответственно.
// Параметр iconAnchor может показаться незначительным, однако он играет важную роль на больших масштабах. Посмотрите, мы указали 0, 0 и метка с правильного адреса перепрыгнула на соседний берег. Включите «Различия» и убедитесь, что мы никак не меняли координаты метки, а значит адрес такой же, как на прошлом шаге.
const mainPinIcon = L.icon ({
  iconUrl: './location-icon.png',
  iconSize: [52 , 52],
  iconAnchor: [26, 52],
});


// Другой самой частой задачей при работе с картой является добавление или удаления чего-либо с карты, чаще — меток. Принцип в этом случае схож с добавлением слоя. Сперва создаём то, что хотим добавить, метку L.marker()...
// Кроме расположения маркеру можно задать различные параметры, например draggable, который означает, что метку можно передвигать по карте. Попробуйте!
const mainPinMarker = L.marker (
  {
    lat: 59.96831,
    lng: 30.31748,
  },
  {
    draggable: true,
    icon: mainPinIcon,
  }
);

// ...затем добавляем на карту addTo(). Такие продвинутые возможности карт удобнее изучать в разделе со списком всех возможностей Leaflet. https://up.htmlacademy.ru/profession/frontender-lite/2/lite-javascript/2/book/11.2
mainPinMarker.addTo(map);

//Обработчики событий метки задаются похожим образом с обработчиками карты. Для примера добавим обработчик события moveend, которое означает, что пользователь закончил передвигать метку, и выведем в консоль новые координаты метки. Обратите внимание, что как и у обычного события в JavaScript, у события Leaflet есть target, только методы у объекта события свои, нужные для карты. Например, метод getLatLng() возвращает объект с новыми координатами.

mainPinMarker.on('moveend', (evt) => {
  console.log(evt.target.getLatLng());
});

// Продолжаем работать с меткой. Иногда, после перемещения, требуется вернуть метку на своё изначальное место. И если это перевести на «язык карты», получится, что метке нужно вернуть изначальные координаты. Для этого достаточно вызвать у метки метод setLatLng() с нужными координатами. Для демонстрации мы добавили кнопку «Вернуть метку на место». Перемещайте метку по карте, а потом нажмите на кнопку, и метка вернётся в начальное положение.
// кнопка найдена в самом начале файла с помощу querySelector

resetButton.addEventListener('click', () => {
// Продолжаем работать с меткой. Иногда, после перемещения, требуется вернуть метку на своё изначальное место. И если это перевести на «язык карты», получится, что метке нужно вернуть изначальные координаты. Для этого достаточно вызвать у метки метод setLatLng() с нужными координатами. Для демонстрации мы добавили кнопку «Вернуть метку на место». Перемещайте метку по карте, а потом нажмите на кнопку, и метка вернётся в начальное положение.
  mainPinMarker.setLatLng({
    lat: 59.96831,
    lng: 30.31748,
  });

// Таким же образом можно добавить возвращение к начальным значениям масштаба и центра карты. Только метод называется setView(), и вызывается у карты, а не метки. Для демонстрации мы добавили кнопку «Вернуть карту в изначальное состояние». Перемещайте метку по карте, измените масштаб карты или сместите центр, а потом нажмите на кнопку, и всё вернётся в начальное состояние.
  map.setView({
    lat: 59.96831,
    lng: 30.31748,
  }, 10);

});

// Мы узнали, что метку можно добавлять на карту, перемещать, менять размеры метки и её иконку, задавать по событию новые координаты. Но, наверное, самое простое, что можно сделать с меткой — удалить её с карты. Для этого достаточно вызвать метод remove().

// mainPinMarker.remove();
